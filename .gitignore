import pandas as pd
import re
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
import os
import glob
import joblib
import numpy as np
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox

# ---- YARDIMCI FONKSİYONLAR ----

def puan_hesapla(row):
    """
    Son 6 yarış verisine göre atın puanını hesaplar.
    """
    puan = 0
    s = str(row).replace('-', '').strip()
    for c in s:
        if c == '1': puan += 10
        elif c == '2': puan += 5
        elif c == '3': puan += 3
        elif c in '45': puan += 1
    return puan

def veri_cek_ve_hazirla(kosu_data_str):
    """
    Metin verisinden at yarışı bilgilerini çekip DataFrame'e dönüştürür.
    """
    kosu_pattern = r'(\d+\. Koşu:.*?(\d{3,4}) Çim)'
    kosu_bloklari = re.split(kosu_pattern, kosu_data_str)
    tum_kosu_verileri = []
    
    for i in range(1, len(kosu_bloklari), 3):
        kosu_basligi = kosu_bloklari[i]
        try:
            kosu_mesafesi = int(re.search(r'(\d{3,4}) Çim', kosu_basligi).group(1))
        except (AttributeError, ValueError):
            kosu_mesafesi = np.nan
        kosu_icerigi = kosu_bloklari[i+2] if i+2 < len(kosu_bloklari) else ""
        lines = kosu_icerigi.strip().split('\n')
        table_start = -1
        for j, line in enumerate(lines):
            if line.startswith('N\tAt İsmi\tYaş'):
                table_start = j
                break
        if table_start == -1: continue
        table_data = []
        for line in lines[table_start:table_start+50]:
            if line.strip() and re.match(r'^\d+\t', line):
                table_data.append(line)
            elif not line.strip(): break
        if not table_data: continue
        temp_file = "temp_race_data.txt"
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write("N\tAt_Ismi\tYaş\tOrijin\tSıklet\tJokey\tSahip\tAntrenör\tSt\tHP\tSon_6_Yaris\tKGS\ts20\tEn_İyi_D\tGanyan\tAGF\tİdm\n")
            for line in table_data: f.write(line + '\n')
        try:
            df_kosu = pd.read_csv(temp_file, sep='\t', encoding='utf-8')
            df_kosu['Kosu_No'] = i//3 + 1
            df_kosu['Mesafe'] = kosu_mesafesi
            tum_kosu_verileri.append(df_kosu)
            os.remove(temp_file)
        except:
            try: os.remove(temp_file)
            except: pass
            continue
    if tum_kosu_verileri: return pd.concat(tum_kosu_verileri, ignore_index=True)
    return pd.DataFrame()

def csv_dosyasini_oku(dosya_yolu):
    """
    CSV dosyasını doğru şekilde okur
    """
    try:
        with open(dosya_yolu, 'r', encoding='utf-8-sig') as f:
            lines = f.readlines()
        header_line_index = -1
        for i, line in enumerate(lines):
            if line.startswith('At No;At İsmi'):
                header_line_index = i
                break
        if header_line_index == -1: return None
        veri_satirlari = lines[header_line_index:header_line_index + 200]
        temp_filename = f"temp_{os.path.basename(dosya_yolu)}"
        with open(temp_filename, 'w', encoding='utf-8') as f:
            f.writelines(veri_satirlari)
        df = pd.read_csv(temp_filename, sep=';', encoding='utf-8')
        try: os.remove(temp_filename)
        except: pass
        df['Mesafe'] = np.nan
        df['Yaş'] = pd.to_numeric(df['Yaş'].astype(str).str.extract(r'(\d+)')[0], errors='coerce')
        df['Kilo'] = pd.to_numeric(df['Kilo'].astype(str).str.replace(',', '.'), errors='coerce')
        return df
    except Exception as e: return None

def model_egit_ve_kaydet(klasor_yolu, force_retrain=False, model_secimi='RandomForest'):
    """
    Modeli eğitir ve kaydeder.
    """
    model_dosya = f'at_yarisi_modeli_{model_secimi}.joblib'
    if not force_retrain and os.path.exists(model_dosya):
        try:
            model = joblib.load(model_dosya)
            print("✅ Önceden eğitilmiş model yüklendi")
            return model
        except Exception as e:
            print(f"Model yüklenirken hata: {e}, yeniden eğitiliyor...")
    
    print("⏳ Model eğitimi başlıyor...")
    dosya_listesi = glob.glob(os.path.join(klasor_yolu, '*.csv'))
    egitim_verisi = []
    for dosya_yolu in dosya_listesi:
        df = csv_dosyasini_oku(dosya_yolu)
        if df is not None: egitim_verisi.append(df)
    if not egitim_verisi:
        print("Hata: Eğitim verisi bulunamadı.")
        return None
    df_egitim = pd.concat(egitim_verisi, ignore_index=True)
    print(f"✅ Toplam {len(df_egitim)} satır veri yüklendi")
    df_egitim.columns = [col.strip() for col in df_egitim.columns]
    yeniden_adlandirma = {'At İsmi': 'At_Ismi', 'Jokey Adı': 'Jokey', 'Antrenör Adı': 'Antrenör', 'Yaş': 'Yas', 'Kilo': 'Kilo', 'Sıklet': 'Kilo'}
    df_egitim.rename(columns=yeniden_adlandirma, inplace=True)
    son6_sutunlari = [col for col in df_egitim.columns if 'Son' in col and ('6' in col or 'Altı' in col)]
    if son6_sutunlari: df_egitim['Son_6_Yaris'] = df_egitim[son6_sutunlari[0]]
    df_egitim['AGF'] = pd.to_numeric(df_egitim['AGF'].astype(str).str.strip('%').str.split('(').str[0], errors='coerce')
    df_egitim['Ganyan'] = pd.to_numeric(df_egitim['Ganyan'].astype(str).str.replace(',', '.'), errors='coerce')
    df_egitim['Son_6_Puan'] = df_egitim['Son_6_Yaris'].apply(puan_hesapla)
    df_egitim['Derece_Temiz'] = df_egitim['Derece'].astype(str).str.strip().str.extract(r'(\d+)')[0]
    df_egitim['Kazanan'] = (df_egitim['Derece_Temiz'] == '1').astype(int)
    features = ['AGF', 'Ganyan', 'Son_6_Puan', 'Jokey', 'Antrenör', 'Yas', 'Kilo']
    df_egitim_clean = df_egitim.dropna(subset=['Jokey', 'Antrenör']).copy()
    X = df_egitim_clean[features]
    y = df_egitim_clean['Kazanan']
    numerical_features = ['AGF', 'Ganyan', 'Son_6_Puan', 'Yas', 'Kilo']
    categorical_features = ['Jokey', 'Antrenör']
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', SimpleImputer(strategy='mean'), numerical_features),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ],
        remainder='passthrough'
    )
    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', RandomForestClassifier(
            n_estimators=50, max_depth=8, min_samples_split=20, min_samples_leaf=10, random_state=42, class_weight='balanced'
        ))
    ])
    try:
        cv_scores = cross_val_score(model, X, y, cv=5, scoring='f1')
        print(f"✅ Cross-Validation Doğruluk (F1): {cv_scores.mean():.3f} ± {cv_scores.std():.3f}")
    except ValueError as e:
        print(f"Hata: {e}. Bu hatayı 'train_test_split' içinde yaşadıysanız, 'dropna' öncesi eksik değerleri doldurmayı deneyin.")
        return None
    model.fit(X, y)
    joblib.dump(model, model_dosya)
    print(f"✅ Model başarıyla eğitildi ve {model_dosya} dosyasına kaydedildi")
    return model

# ---- ANA KOD: TKINTER ARAYÜZÜ ----

class HorseRacingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("At Yarışı Tahmin Analizi")
        self.root.geometry("800x600")

        self.model = None
        self.df_kosu_yeni = None
        self.features = ['AGF', 'Ganyan', 'Son_6_Puan', 'Jokey', 'Antrenör', 'Yas', 'Kilo', 'Mesafe']

        self.setup_ui()

    def setup_ui(self):
        # Üst bölüm
        top_frame = ttk.Frame(self.root, padding="10 10 10 10")
        top_frame.pack(fill=tk.X)

        self.status_label = ttk.Label(top_frame, text="Hazır", font=("Helvetica", 12))
        self.status_label.pack(side=tk.LEFT)

        start_button = ttk.Button(top_frame, text="Analiz Başlat", command=self.run_analysis)
        start_button.pack(side=tk.RIGHT)

        # Butonlar için orta bölüm
        button_frame = ttk.Frame(self.root, padding="10 0 10 0")
        button_frame.pack(fill=tk.X)

        favori_button = ttk.Button(button_frame, text="Favorileri Göster", command=self.show_favorites)
        favori_button.pack(side=tk.LEFT, padx=5, pady=5)

        surpriz_button = ttk.Button(button_frame, text="Sürprizleri Göster", command=self.show_surprises)
        surpriz_button.pack(side=tk.LEFT, padx=5, pady=5)
        
        all_button = ttk.Button(button_frame, text="Tüm Atları Göster", command=self.show_all_horses)
        all_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Temizle butonu eklendi
        clear_button = ttk.Button(button_frame, text="Ekranı Temizle", command=self.clear_results)
        clear_button.pack(side=tk.RIGHT, padx=5, pady=5)

        # Sonuçlar için alt bölüm
        result_frame = ttk.Frame(self.root, padding="10 10 10 10")
        result_frame.pack(fill=tk.BOTH, expand=True)

        self.result_text = scrolledtext.ScrolledText(result_frame, wrap=tk.WORD, font=("Consolas", 10))
        self.result_text.pack(fill=tk.BOTH, expand=True)
    
    def clear_results(self):
        """Ekranı temizler ve durumu günceller."""
        self.result_text.delete(1.0, tk.END)
        self.status_label.config(text="Ekran Temizlendi", foreground="black")

    def run_analysis(self):
        """Analiz sürecini başlatır."""
        self.status_label.config(text="Model yükleniyor ve veri analiz ediliyor...", foreground="blue")
        self.root.update_idletasks()
        
        klasor_yolu = 'sonuclar'
        kosu_dosya_adi = 'tjk.txt'

        if not os.path.exists(klasor_yolu):
            messagebox.showerror("Hata", f"'{klasor_yolu}' klasörü bulunamadı.")
            return

        self.model = model_egit_ve_kaydet(klasor_yolu, force_retrain=False)
        if self.model is None:
            self.status_label.config(text="Analiz Başarısız!", foreground="red")
            return

        try:
            with open(kosu_dosya_adi, 'r', encoding='utf-8') as f:
                kosu_data_str = f.read()
        except FileNotFoundError:
            messagebox.showerror("Hata", f"{kosu_dosya_adi} dosyası bulunamadı.")
            return

        self.df_kosu_yeni = veri_cek_ve_hazirla(kosu_data_str)
        if self.df_kosu_yeni.empty:
            messagebox.showinfo("Bilgi", "Analiz edilecek koşu verisi bulunamadı.")
            self.status_label.config(text="Analiz Tamamlandı", foreground="green")
            return

        self.df_kosu_yeni.columns = [col.strip() for col in self.df_kosu_yeni.columns]
        yeniden_adlandirma = {'Sıklet': 'Kilo', 'Yaş': 'Yas'}
        self.df_kosu_yeni.rename(columns=yeniden_adlandirma, inplace=True)
        self.df_kosu_yeni['AGF'] = pd.to_numeric(self.df_kosu_yeni['AGF'].astype(str).str.strip('%').str.split('(').str[0], errors='coerce')
        self.df_kosu_yeni['Ganyan'] = pd.to_numeric(self.df_kosu_yeni['Ganyan'].astype(str).str.replace(',', '.'), errors='coerce')
        self.df_kosu_yeni['Son_6_Puan'] = self.df_kosu_yeni['Son_6_Yaris'].apply(puan_hesapla)
        self.df_kosu_yeni = self.df_kosu_yeni.dropna(subset=['Jokey', 'Antrenör']).copy()
        
        self.df_kosu_yeni['Yas'] = pd.to_numeric(self.df_kosu_yeni['Yas'], errors='coerce')
        self.df_kosu_yeni['Kilo'] = pd.to_numeric(self.df_kosu_yeni['Kilo'], errors='coerce')
        
        num_features = ['AGF', 'Ganyan', 'Son_6_Puan', 'Yas', 'Kilo', 'Mesafe']
        imputer_model = SimpleImputer(strategy='mean')
        imputer_features = [f for f in num_features if f in self.df_kosu_yeni.columns and self.df_kosu_yeni[f].isnull().sum() < len(self.df_kosu_yeni[f])]
        imputer_model.fit(self.df_kosu_yeni[imputer_features])
        self.df_kosu_yeni[imputer_features] = imputer_model.transform(self.df_kosu_yeni[imputer_features])

        tahminler = self.model.predict_proba(self.df_kosu_yeni[self.features])[:, 1]
        self.df_kosu_yeni['Tahmin_Olasiligi'] = tahminler * 100
        
        self.status_label.config(text="Analiz Tamamlandı", foreground="green")
        messagebox.showinfo("Bilgi", "Analiz başarıyla tamamlandı. Sonuçları görmek için ilgili butona tıklayın.")
    
    # Burası güncellendi
    def format_results(self, df_to_display, title):
        """Sonuçları okunabilir bir metin formatına dönüştürür."""
        output = f"\n--- {title.upper()} ---\n"
        kosu_listesi = sorted(df_to_display['Kosu_No'].unique())
        
        for kosu_no in kosu_listesi:
            df_kosu_temp = df_to_display[df_to_display['Kosu_No'] == kosu_no].copy()
            if not df_kosu_temp.empty:
                df_siralama = df_kosu_temp.sort_values(by='Tahmin_Olasiligi', ascending=False).head(5)
                
                output += f"\n🏇 {kosu_no}. KOŞU: En İyi Adaylar\n"
                output += "-"*40 + "\n"
                
                for _, row in df_siralama.iterrows():
                    at_ismi = row['At_Ismi']
                    tahmin_olasiligi = row['Tahmin_Olasiligi']
                    agf = row['AGF'] if pd.notna(row['AGF']) else 0
                    ganyan = row['Ganyan'] if pd.notna(row['Ganyan']) else 0
                    son_6_puan = row['Son_6_Puan'] if pd.notna(row['Son_6_Puan']) else 0
                    jokey = row['Jokey'] if pd.notna(row['Jokey']) else "Bilinmiyor"
                    kilo = row['Kilo'] if pd.notna(row['Kilo']) else 0

                    yorum = ""
                    if tahmin_olasiligi > 70: yorum = "⭐ GÜÇLÜ ADAY"
                    elif tahmin_olasiligi > 50: yorum = "⚡ POTANSİYEL ADAY"
                    elif tahmin_olasiligi > agf: yorum = "📈 BEKLENTİ ÜZERİ"
                    else: yorum = "📊 DEĞERLENDİRİLİYOR"

                    output += f"  At: {at_ismi}\n"
                    output += f"  Tahmin: {tahmin_olasiligi:.1f}% | AGF: {agf:.1f}% | Ganyan: {ganyan:.1f}\n"
                    output += f"  Jokey: {jokey} | Kilo: {kilo:.1f} | Son 6 Puan: {son_6_puan:.0f}\n"
                    output += f"  Yorum: {yorum}\n"
                    output += "  " + "-"*38 + "\n"
        
        return output

    def show_favorites(self):
        """Her koşudaki en favori atı (en yüksek AGF) gösterir."""
        if self.df_kosu_yeni is None:
            messagebox.showwarning("Uyarı", "Lütfen önce 'Analiz Başlat' butonuna tıklayın.")
            return

        favori_atlar = pd.DataFrame()
        kosu_listesi = sorted(self.df_kosu_yeni['Kosu_No'].unique())
        
        for kosu_no in kosu_listesi:
            df_temp = self.df_kosu_yeni[self.df_kosu_yeni['Kosu_No'] == kosu_no].copy()
            if not df_temp.empty:
                en_favori = df_temp.loc[df_temp['AGF'].idxmax()]
                favori_atlar = pd.concat([favori_atlar, en_favori.to_frame().T], ignore_index=True)
        
        if favori_atlar.empty:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, "Hiç favori aday bulunamadı.")
        else:
            formatted_results = self.format_results(favori_atlar, "Favori Adaylar")
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, formatted_results)

    def show_surprises(self):
        """Modelin tahmin olasılığı, AGF'den yüksek olan atları gösterir."""
        if self.df_kosu_yeni is None:
            messagebox.showwarning("Uyarı", "Lütfen önce 'Analiz Başlat' butonuna tıklayın.")
            return
            
        surpriz_atlar = self.df_kosu_yeni[(self.df_kosu_yeni['Tahmin_Olasiligi'] > self.df_kosu_yeni['AGF'] * 1.5) & (self.df_kosu_yeni['Tahmin_Olasiligi'] > 10)].copy()
        if surpriz_atlar.empty:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, "Hiç sürpriz aday bulunamadı.")
        else:
            formatted_results = self.format_results(surpriz_atlar, "Sürpriz Adaylar")
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, formatted_results)

    def show_all_horses(self):
        """Tüm atları tahmin olasılığına göre gösterir."""
        if self.df_kosu_yeni is None:
            messagebox.showwarning("Uyarı", "Lütfen önce 'Analiz Başlat' butonuna tıklayın.")
            return

        formatted_results = self.format_results(self.df_kosu_yeni, "Tüm Adaylar")
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, formatted_results)

if __name__ == "__main__":
    root = tk.Tk()
    app = HorseRacingApp(root)
    root.mainloop()
